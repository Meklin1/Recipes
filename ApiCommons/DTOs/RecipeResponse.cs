/*
 * Recipe Sharing App API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ApiCommons.DTOs;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RecipeResponse : IEquatable<RecipeResponse>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>

        [DataMember(Name="userId")]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [Required]

        [DataMember(Name="description")]
        public string? Description { get; set; }


        [DataMember(Name = "imageURL")]
        public string? ImageURL { get; set; }

        /// <summary>
        /// Gets or Sets Ingredients
        /// </summary>
        [Required]

        [DataMember(Name="ingredients")]
        public List<RecipeIngredientResponse> Ingredients { get; set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [Required]

        [DataMember(Name="steps")]
        public List<StepResponse> Steps { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>

        [DataMember(Name="created_at")]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>

        [DataMember(Name="updated_at")]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Servings
        /// </summary>

        [DataMember(Name="servings")]
        public long? Servings { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>

        [DataMember(Name="cooking_duration")]
        public long? CookingDuration { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>

        [DataMember(Name = "preparation_duration")]
        public long? PreparationDuration { get; set; }

        /// <summary>
        /// Gets or Sets Energy
        /// </summary>

        [DataMember(Name="energy")]
        public long? Energy { get; set; }



        /// <summary>
        /// Gets or Sets Level
        /// </summary>

        [DataMember(Name="level")]
        public LevelEnum? Level { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>

        [DataMember(Name="version")]
        public long? Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Recipe {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Ingredients: ").Append(Ingredients).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Servings: ").Append(Servings).Append("\n");
            sb.Append("  CookingDuration: ").Append(CookingDuration).Append("\n");
            sb.Append("  PreparationDuration: ").Append(PreparationDuration).Append("\n");
            sb.Append("  Energy: ").Append(Energy).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RecipeResponse)obj);
        }

        /// <summary>
        /// Returns true if Recipe instances are equal
        /// </summary>
        /// <param name="other">Instance of Recipe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Ingredients == other.Ingredients ||
                    Ingredients != null &&
                    Ingredients.SequenceEqual(other.Ingredients)
                ) && 
                (
                    Steps == other.Steps ||
                    Steps != null &&
                    Steps.SequenceEqual(other.Steps)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    Servings == other.Servings ||
                    Servings != null &&
                    Servings.Equals(other.Servings)
                ) && 
                (
                    CookingDuration == other.CookingDuration ||
                    CookingDuration != null &&
                    CookingDuration.Equals(other.CookingDuration)
                ) &&
                (
                    PreparationDuration == other.PreparationDuration ||
                    PreparationDuration != null &&
                    PreparationDuration.Equals(other.PreparationDuration)
                ) &&
                (
                    Energy == other.Energy ||
                    Energy != null &&
                    Energy.Equals(other.Energy)
                ) && 
                (
                    Level == other.Level ||
                    Level != null &&
                    Level.Equals(other.Level)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Ingredients != null)
                    hashCode = hashCode * 59 + Ingredients.GetHashCode();
                    if (Steps != null)
                    hashCode = hashCode * 59 + Steps.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (Servings != null)
                    hashCode = hashCode * 59 + Servings.GetHashCode();
                    if (CookingDuration != null)
                    hashCode = hashCode * 59 + CookingDuration.GetHashCode();
                    if (PreparationDuration != null)
                    hashCode = hashCode * 59 + PreparationDuration.GetHashCode();
                    if (Energy != null)
                    hashCode = hashCode * 59 + Energy.GetHashCode();
                    if (Level != null)
                    hashCode = hashCode * 59 + Level.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RecipeResponse left, RecipeResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RecipeResponse left, RecipeResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
