/*
 * Recipe Sharing App API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Ingredient : IEquatable<Ingredient>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]

        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Measurement
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MeasurementEnum
        {
            /// <summary>
            /// Enum KgEnum for kg
            /// </summary>
            [EnumMember(Value = "kg")]
            Kg = 0,
            /// <summary>
            /// Enum GEnum for g
            /// </summary>
            [EnumMember(Value = "g")]
            G = 1,
            /// <summary>
            /// Enum LEnum for l
            /// </summary>
            [EnumMember(Value = "l")]
            L = 2,
            /// <summary>
            /// Enum MlEnum for ml
            /// </summary>
            [EnumMember(Value = "ml")]
            Ml = 3,
            /// <summary>
            /// Enum TspEnum for tsp
            /// </summary>
            [EnumMember(Value = "tsp")]
            Tsp = 4,
            /// <summary>
            /// Enum TbspEnum for tbsp
            /// </summary>
            [EnumMember(Value = "tbsp")]
            Tbsp = 5,
            /// <summary>
            /// Enum PieceEnum for piece
            /// </summary>
            [EnumMember(Value = "piece")]
            Piece = 6        }

        /// <summary>
        /// Gets or Sets Measurement
        /// </summary>
        [Required]

        [DataMember(Name="measurement")]
        public MeasurementEnum? Measurement { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [Required]

        [DataMember(Name="amount")]
        public long? Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ingredient {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Measurement: ").Append(Measurement).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Ingredient)obj);
        }

        /// <summary>
        /// Returns true if Ingredient instances are equal
        /// </summary>
        /// <param name="other">Instance of Ingredient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ingredient other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Measurement == other.Measurement ||
                    Measurement != null &&
                    Measurement.Equals(other.Measurement)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Measurement != null)
                    hashCode = hashCode * 59 + Measurement.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Ingredient left, Ingredient right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Ingredient left, Ingredient right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
