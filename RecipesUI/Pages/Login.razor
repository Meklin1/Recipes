@page "/login"
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject HttpClient Http
@inject RecipesUI.Services.CustomAuthenticationStateProviderService AuthenticationStateProvider
@* @inject Blazored.SessionStorage.ISessionStorageService SessionStorage *@
@inject NavigationManager Navigation
@inject ILogger<Login> Logger

<div class="login-page">
    <main>
        <div class="left-side">
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" placeholder="Enter your email" />

                <label for="password">Password</label>
                <InputText id="password" class="form-control" @bind-Value="loginModel.Password" type="password" placeholder="Enter your password" />
                <div class="btn-group">
                <button type="submit" class="login-btn">Sign in</button>
                </div>

                <div class="links">
                    <a href="register">Do not have an account?</a>
                </div>
            </EditForm>
                <div class="alert-container">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success">@successMessage</div>
                }
                </div>
        </div>

        <div class="right-side"></div>
    </main>
</div>

@code {
    private LogInRequest loginModel = new LogInRequest();
    private string errorMessage;
    private string successMessage;

    private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync("/v1/auth/login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            AuthenticationStateProvider.MarkUserAsAuthenticatedAsync(token);
            successMessage = "Login successful";
            errorMessage = string.Empty;
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "Login failed. Please check your credentials.";
            var error = await response.Content.ReadAsStringAsync();
            Logger.LogError("Error logging in: {error}", error);
            successMessage = string.Empty;
        }
    }

    public class LogInRequest
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
