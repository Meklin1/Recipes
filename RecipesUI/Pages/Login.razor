@page "/login"
@using ApiCommons.DTOs
@inject HttpClient Http
@inject RecipesUI.Services.CustomAuthenticationStateProviderService AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ILogger<Login> Logger
@inject IJSRuntime JSRuntime

<div class="login-page">
    <main>
        <div class="left-side">
            <EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="loginRequest.Email" placeholder="Enter your email" />

                <label for="password">Password</label>
                <InputText id="password" class="form-control" @bind-Value="loginRequest.Password" type="password" placeholder="Enter your password" />
                <div class="btn-group">
                <button type="submit" class="login-btn">Sign in</button>
                </div>

                <div class="links">
                    <a href="register">Do not have an account?</a>
                </div>
            </EditForm>
                <div class="alert-container">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success">@successMessage</div>
                }
                </div>
        </div>

        <div class="right-side"></div>
    </main>
</div>

@code {
    private string errorMessage;
    private string successMessage;
    private LogInRequest loginRequest = new LogInRequest();
    
    private async Task HandleLogin()
    {
        try
        {
            var response = await AuthenticationStateProvider.LoginAsync(loginRequest);
                if (response != null)
                {
                    var token = response;
                    
                    await AuthenticationStateProvider.MarkUserAsAuthenticatedAsync(token);
                    await JSRuntime.InvokeVoidAsync("cookieHelper.setCookie", "authToken", token, 1);

                    successMessage = "Login successful";
                    errorMessage = string.Empty;
                    Navigation.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Login failed. Please check your credentials.";
                    Logger.LogError("Error logging in: {error}", errorMessage);
                    successMessage = string.Empty;
                }
        }catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred while logging in.");
            errorMessage = "An unexpected error occurred. Please try again later.";
            successMessage = string.Empty;
        }
        
        
    }

    
}
