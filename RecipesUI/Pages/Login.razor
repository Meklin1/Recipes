@page "/login"
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject HttpClient Http
@inject RecipesUI.Services.CustomAuthenticationStateProviderService AuthenticationStateProvider
@* @inject Blazored.SessionStorage.ISessionStorageService SessionStorage *@
@inject NavigationManager Navigation
@inject ILogger<Login> Logger

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Login</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="email">Email:</label>
                            <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                        </div>
                        <div class="form-group">
                            <label for="password">Password:</label>
                            <InputText id="password" class="form-control" @bind-Value="loginModel.Password" type="password" />
                        </div>
                        <button type="submit" class="btn btn-primary btn-block mt-3">Login</button>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">@errorMessage</div>
                    }
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-3">@successMessage</div>
                    }
                </div>
            </div>
            <div class="mt-3 text-center">
                <p>If you don't have an account, please <NavLink href="register">register</NavLink>.</p>
            </div>
        </div>
    </div>
</div>

@code {
    private LogInRequest loginModel = new LogInRequest();
    private string errorMessage;
    private string successMessage;

    private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync("/v1/auth/login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            AuthenticationStateProvider.MarkUserAsAuthenticatedAsync(token);
            successMessage = "Login successful";
            errorMessage = string.Empty;
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "Login failed. Please check your credentials.";
            var error = await response.Content.ReadAsStringAsync();
            Logger.LogError("Error logging in: {error}", error);
            successMessage = string.Empty;
        }
    }

    public class LogInRequest
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
