@page "/register"
@using ApiCommons.DTOs
@using RecipesUI.Services
@inject IUserService UserService
@inject NavigationManager Navigation

<div class="login-page">
    <main>
        <div class="left-side">
            <EditForm Model="userRequest" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label for="username">Username</label>
                <InputText id="email" class="form-control" @bind-Value="userRequest.Username" placeholder="Enter your username" />

                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="userRequest.Email" type="email" placeholder="Enter your email" />

                <label for="password">Password</label>
                <InputText id="password" class="form-control" @bind-Value="userRequest.Password" type="password" placeholder="Enter your password" />

                <div class="btn-group">
                <button type="submit" class="login-btn">Register</button>
                </div>

                <div class="links">
                    <a href="login">Already have an account?</a>
                </div>
            </EditForm>

                 <div class="alert-container">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success">@successMessage</div>
                }
                </div>
        </div>
        <div class="right-side"></div>
    </main>
</div>


@code {
    // private RegisterRequest registerModel = new RegisterRequest();
    private string errorMessage;
    private string successMessage;
    private UserRequest userRequest = new UserRequest();



    private async Task HandleRegister()
    {
        try
        {
            var response = await UserService.CreateUser(userRequest);
            if (response != null)
            {
                successMessage = "Registration successful. Redirecting to login page...";
                errorMessage = string.Empty;
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Registration failed. Please check your details.";
                successMessage = string.Empty;
            }
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"HTTP error occurred: {httpEx.Message}";
            successMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            successMessage = string.Empty;
        }
    }
    
}
