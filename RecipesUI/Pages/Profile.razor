@page "/profile"
@using RecipesUI.Services
@using ApiCommons.DTOs
@using MudBlazor
@inject IRecipeService RecipeService
@inject ILogger<Index> Logger
@inject CustomAuthenticationStateProviderService AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject IUserService UserService
@inject NavigationManager NavigationManager



@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <header>
            <div class="account-header-title">
                <h1>My Account</h1>
            </div>
            <div class="account-details">
                <div class="account-image-wrapper">
                    <svg width="30" height="30" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M19 21C19 17.134 15.866 14 12 14C8.13401 14 5 17.134 5 21" stroke="#333333" stroke-width="1.5" stroke-linecap="round"/>
                        <path d="M15 8C15 9.65685 13.6569 11 12 11C10.3431 11 9 9.65685 9 8C9 6.34315 10.3431 5 12 5C13.6569 5 15 6.34315 15 8Z" stroke="#333333" stroke-width="1.5"/>
                    </svg>
                </div>
                @if (isLoading)
                {
                    <div class="skeleton-account-text-info">
                        <MudSkeleton Height="20px" Width="150px" Animation="Animation.Wave" Class="skeleton-username" />
                        <MudSkeleton Height="20px" Width="200px" Animation="Animation.Wave" Class="skeleton-email" />
                    </div>
                }
                else
                {
                    <div class="account-text-info">
                        <p class="username">@@@user.Username</p>
                        <p class="email">@user.Email</p>
                    </div>
                }
                  <div class="logout-section">
                    <button class="logout-btn" @onclick="() => Logout()">Logout</button>
                  </div>
                
            </div>
            
        </header>
        <main>
            <div class="main-items main-page">
                <div class="header-row">
                    <h2>My Recipes</h2>
                    <div class="header-button-container">
                    <button class="create-button" @onclick="() => NavigateToCreate()">Create Recipe</button>
                    </div>
                </div>
                <div class="recipe-grid">
                    @if (isLoading)
                    {
                        @for (int i = 0; i < pageSize; i++)
                        {
                            <div class="recipe-card skeleton-card">
                                <MudSkeleton Class="skeleton-placeholder" Width="100%" Animation="Animation.Wave" />
                                <MudSkeleton Class="skeleton-recipe-card-title" Width="50%" Animation="Animation.Wave" />
                            </div>
                        }
                    }
                    else if (!recipes.Any())
                    {
                        <p>No recipes found.</p>
                    }
                    else
                    {
                        @foreach (var recipe in recipes)
                        {
                            <a href="recipe/@recipe.Id" class="recipe-link">
                                <div class="recipe-card">
                                    <div class="placeholder">
                                       @if (!string.IsNullOrEmpty(recipe.ImageURL) && recipe.ImageURL.StartsWith("data:image/"))
                                        {
                                            <img src="@recipe.ImageURL" alt="@recipe.Name"/>
                                        }
                                        else
                                        {
                                            <svg width="89" height="89" viewBox="0 0 89 89" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M0 33.375C0 27.2389 4.98887 22.25 11.125 22.25C11.2119 22.25 11.3162 22.25 11.4031 22.25C12.6895 15.9053 18.3041 11.125 25.0312 11.125C27.6387 11.125 30.0723 11.8377 32.1408 13.0719C34.4527 8.62187 39.1287 5.5625 44.5 5.5625C49.8713 5.5625 54.5473 8.62187 56.8592 13.0719C58.9277 11.8377 61.3613 11.125 63.9688 11.125C70.6959 11.125 76.3105 15.9053 77.5969 22.25C77.6838 22.25 77.7881 22.25 77.875 22.25C84.0111 22.25 89 27.2389 89 33.375C89 35.4088 88.4611 37.3035 87.5051 38.9375H1.49492C0.538867 37.3035 0 35.4088 0 33.375ZM0 49.2629C0 46.6381 2.13809 44.5 4.76289 44.5H84.2371C86.8619 44.5 89 46.6381 89 49.2629C89 61.5178 81.282 71.9822 70.4525 76.0498L70.1396 78.5703C69.792 81.3516 67.4279 83.4375 64.6119 83.4375H24.3707C21.5721 83.4375 19.1906 81.3516 18.843 78.5703L18.5301 76.0672C7.71797 71.9822 0 61.5178 0 49.2629Z" fill="#EEEEEE"/>
                                            </svg>
                                        }
                                    </div>
                                    <div class="time-badge">@TotalDuration(recipe.PreparationDuration,recipe.CookingDuration) min</div>
                                    <div class="title">@recipe.Name</div>
                                </div>
                            </a>
                        }
                    }
                </div>
                <div class="pagination">
                    <button @onclick="async () => await GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">&lt;</button>
                    <button>@currentPage</button>
                    <button @onclick="async () => await GoToPage(currentPage + 1)">&gt;</button>
                </div>
            </div>
        </main>
    </Authorized>
    <NotAuthorized>
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h6">You are not authorized to view this content.</MudText>
            <MudText Typo="Typo.body1">Please sign in or sign up to continue.</MudText>
            <MudDivider Class="my-4" />
            <MudGrid>
                <MudItem xs="12" Class="my-4">
                    <MudDivider />
                </MudItem>
                <MudItem xs="12">
                    <MudButton Variant=Variant.Filled Color=Color.Primary OnClick="@(e => NavigationManager.NavigateTo("login"))">Login</MudButton>
                    <MudButton Class="ml-2" Variant=Variant.Filled Color=Color.Secondary OnClick="@(e => NavigationManager.NavigateTo("register"))">Register</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<RecipeResponse> recipes;
    private int currentPage = 1;
    private int totalRecipes;
    private int pageSize = 9;
    private int totalPages;
    private bool isInitialized = false;
    private string searchQuery = string.Empty;
    private UserResponse? user = new UserResponse();
    private bool isAuthorized = false;
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await JSRuntime.InvokeAsync<string>("cookieHelper.getCookie", "authToken");
            if (!string.IsNullOrEmpty(token))
            {
                await AuthenticationStateProvider.CheckAuthenticationStateAsync(); // Ensure authentication state is checked after first render
                user = await UserService.GetUserById(AuthenticationStateProvider.GetUserIdFromToken(token));
                isAuthorized = true;
                await LoadRecipes();
                isInitialized = true;
                StateHasChanged();
            }
            else
            {
                Logger.LogWarning("No auth token found. Redirecting to login page.");
                NavigationManager.NavigateTo("login");
            }
        }
    }

    private async Task LoadRecipes()
    {
        try
        {
            isLoading = true;
            Logger.LogInformation("Fetching recipes for page {currentPage}.", currentPage);
            var token = await JSRuntime.InvokeAsync<string>("cookieHelper.getCookie", "authToken");
            var userId = AuthenticationStateProvider.GetUserIdFromToken(token);
            recipes = await RecipeService.GetRecipes(userId: userId, page: currentPage, pageSize: pageSize, search: searchQuery) ?? new List<RecipeResponse>();
            Logger.LogInformation("Recipes fetched successfully.");
            totalRecipes = recipes.Count;
            totalPages = (int)Math.Ceiling((double)totalRecipes / pageSize) + 1;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching recipes.");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > totalPages)
            return;

        currentPage = pageNumber;
        await LoadRecipes();
    }
    
    private void Logout()
    {
        NavigationManager.NavigateTo("/logout");
    }
    
    private long TotalDuration(long? prep, long? cook)
    {
        return (prep ?? 0) + (cook ?? 0);
    }
    
    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/create");
    }
    
    
}
