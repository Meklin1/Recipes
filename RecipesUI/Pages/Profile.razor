@page "/profile"
@using RecipesUI.Services
@using ApiCommons.DTOs
@using Microsoft.JSInterop
@inject IRecipeService RecipeService
@inject ILogger<Index> Logger
@inject CustomAuthenticationStateProviderService AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject IUserService UserService
@inject NavigationManager NavigationManager

@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <header>
            <div class="account-header-title">
                <h1>My Account</h1>
            </div>
            <div class="account-details">
                <div class="account-image-wrapper">
                    <!-- SVG content -->
                </div>
                <div class="account-text-info">
                    <p class="username">@user.Username</p>
                    <p class="email">@user.Email</p>
                </div>
            </div>
        </header>
        <main>
            <div class="main-items main-page">
                <div class="header-row">
                    <h2>My Recipes</h2>
                    <div class="button-container">
                        <div class="dropdown-container">
                            <button class="create-button">Create Recipe</button>
                        </div>
                    </div>
                </div>
                <div class="recipe-grid">
                    @if (recipes == null)
                    {
                        <p>Loading recipes...</p>
                    }
                    else if (!recipes.Any())
                    {
                        <p>No recipes found.</p>
                    }
                    else
                    {
                        @foreach (var recipe in recipes)
                        {
                            <a href="recipe/@recipe.Id">
                                <div class="recipe-card">
                                    <div class="placeholder">
                                        <!-- SVG content -->
                                    </div>
                                    <div class="time-badge">@recipe.PreparationDuration min</div>
                                    <div class="time-badge">@recipe.CookingDuration min</div>
                                    <div class="title">@recipe.Name</div>
                                </div>
                            </a>
                        }
                    }
                </div>
                <div class="pagination">
                    <button @onclick="async () => await GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">&lt;</button>
                    <button>@currentPage</button>
                    <button @onclick="async () => await GoToPage(currentPage + 1)">&gt;</button>
                </div>
            </div>
        </main>
    </Authorized>
@*     <NotAuthorized>
        <p>You are not authorized to view this content. Please <NavLink href="login">login</NavLink>.</p>
    </NotAuthorized> *@
    <NotAuthorized>
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h6">You are not authorized to view this content.</MudText>
            <MudText Typo="Typo.body1">Please sign in or sign up to continue.</MudText>
            <MudDivider Class="my-4" />
            <MudGrid>
                <MudItem xs="12" Class="my-4">
                    <MudDivider />
                </MudItem>
                <MudItem xs="12">
                    <MudButton Variant=Variant.Filled Color=Color.Primary OnClick="@(e => NavigationManager.NavigateTo("login"))">Login</MudButton>
                    <MudButton Class="ml-2" Variant=Variant.Filled Color=Color.Secondary OnClick="@(e => NavigationManager.NavigateTo("register"))">Register</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<RecipeResponse> recipes;
    private int currentPage = 1;
    private int totalRecipes;
    private int pageSize = 9;
    private int totalPages;
    private bool isInitialized = false;
    private string searchQuery = string.Empty;
    private UserResponse? user = new UserResponse();
    private bool isAuthorized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await JSRuntime.InvokeAsync<string>("cookieHelper.getCookie", "authToken");
            if (!string.IsNullOrEmpty(token))
            {
                await AuthenticationStateProvider.CheckAuthenticationStateAsync(); // Ensure authentication state is checked after first render
                user = await UserService.GetUserById(AuthenticationStateProvider.GetUserIdFromToken(token));
                isAuthorized = true;
                await LoadRecipes();
                isInitialized = true;
                StateHasChanged();
            }
            else
            {
                Logger.LogWarning("No auth token found. Redirecting to login page.");
                NavigationManager.NavigateTo("login");
            }
        }
    }

    private async Task LoadRecipes()
    {
        try
        {
            Logger.LogInformation("Fetching recipes for page {currentPage}.", currentPage);
            var token = await JSRuntime.InvokeAsync<string>("cookieHelper.getCookie", "authToken");
            var userId = AuthenticationStateProvider.GetUserIdFromToken(token);
            recipes = await RecipeService.GetRecipes(userId: userId, page: currentPage, pageSize: pageSize, search: searchQuery) ?? new List<RecipeResponse>();
            Logger.LogInformation("Recipes fetched successfully.");
            totalRecipes = recipes.Count;
            totalPages = (int)Math.Ceiling((double)totalRecipes / pageSize) + 1;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching recipes.");
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > totalPages)
            return;

        currentPage = pageNumber;
        await LoadRecipes();
    }
}
